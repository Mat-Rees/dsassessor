#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Sep  3 11:08:55 2018

@author: mathewrees
"""

import json, traceback
import pandas as pd
import re, requests
from pandas.io.json import json_normalize


class JsonParserComplex():
    
    def __init__(self):
        self.masterDF = pd.DataFrame()
    
    
    def tryFlatten(self, treatedString):
        jsonObj = json.loads(treatedString)
        DF = json_normalize(jsonObj)
        return DF
    
    
    # Replaces empty jsons and empty arrays
    def pretreatJsonString(self, jsonString):
        treatedString = jsonString.replace('\n', ' ')
        treatedString = treatedString.replace("{}", "\"Nan\"")
        treatedString = treatedString.replace("[]", "\"Nan\"")
        #treatedString = treatedString.replace(r'""', "\"Nan\"")
        return treatedString
    
    
    
    def checkColumnTypes(self, DF):
        print("Checking DataFrame Column's data types")
        print(type(DF))
        if DF is None:
            print("THIS IS A NONE TYPE")
            return 2
        else:
            for column in DF.columns:
                print(type(DF.iloc[0][column]))
                elementVal = DF.iloc[0][column]
                elementDataType = type(elementVal)
                
                if elementDataType is list:
                    return 0 # More Processing
            return 1 # Finish Process

        
    
    def processListOfOneJson(oneJson):
        str(oneJson)
        DF = JsonParserComplex.tryFlatten(treatedString)
        return DF
    
    
    def processListOfManyJson():
        return DF
        
    def processListOfStrings():
        return DF
        
    def processListOfLists():
        return DF
    
    

    
    def addColumnNameDetails(self):
        return "?"
    
    def addColumns(self, inDF):
        return outDF
    
    def addRows(self, inDF):
        return outDF


url = 'https://api.foursquare.com/v2/venues/explore'

params = dict(client_id='QP4KVGMOART2DB3ND34KXJSWUTZWZIJ51XZPSZA1QCTTAAJ1', 
              client_secret='SWZYXF14SYBUZSDA1JQ03E2C2VGISDHKYMVKZPCKERC5FPBQ',
              v='20180323',
              ll='51.51399612,-0.122826455',
              radius = '5000',
              query='coffee',
              limit=3)
        
resp = requests.get(url=url, params=params)

jpc = JsonParserComplex()
treatedString = jpc.pretreatJsonString(resp.text)
DF = jpc.tryFlatten(treatedString)
